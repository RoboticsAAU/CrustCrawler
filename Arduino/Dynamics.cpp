#include "Dynamics.h"  

/*
JointTorques Dynamics::InverseDynamics(Velocities& velocities, unsigned long  loopTime)
{
	_desiredPos.thetas[1] = Integrate(velocities.velocities[1], _previousDessiredPos[1], loopTime);
	_desiredPos.thetas[2] = Integrate(velocities.velocities[2] ,_previousDessiredPos[2], loopTime);
	_desiredPos.thetas[3] = Integrate(velocities.velocities[3], _previousDessiredPos[3], loopTime);

	_angleAccelerations.accelerations[1] = Differentiate(velocities.velocities[1], _previousVelocities.velocities[1], loopTime);
	_angleAccelerations.accelerations[2] = Differentiate(velocities.velocities[2], _previousVelocities.velocities[2], loopTime);
	_angleAccelerations.accelerations[3] = Differentiate(velocities.velocities[3], _previousVelocities.velocities[3], loopTime);

	_returnTorques.torques[1] = (((0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) - 0.1121e-1) * pow(cos(_desiredPos.thetas[3]), 0.2e1) - 0.1762e-1 * cos(_desiredPos.thetas[3]) - 0.1581e-1 + 0.5e-3 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.5e-3 * sin(_desiredPos.thetas[2]) + 0.1121e-1 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) + 0.1762e-1 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) + 0.1762e-1 * cos(_desiredPos.thetas[3]) + 0.5606e-2 * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.2e-3 * sin(_desiredPos.thetas[3]) + 0.2162e-1) * _angleAccelerations.accelerations[1] + (0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) - 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[2]) * _angleAccelerations.accelerations[2] + ((0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) + 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (-0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3]) + 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) - 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) - 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1])) * pow(velocities.velocities[1], 0.2e1) + ((((0.2242e-1 * sin(_desiredPos.thetas[3]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.10e-2) * cos(_desiredPos.thetas[3]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.3522e-1 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.2242e-1 * sin(_desiredPos.thetas[2]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.3524e-1 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) - 0.10e-2 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) + 0.3165e-1 * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (-0.5e-3 - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) - 0.1121e-1 * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) - 0.1761e-1 * sin(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * velocities.velocities[2] + (((0.2242e-1 * sin(_desiredPos.thetas[3]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.5e-3) * cos(_desiredPos.thetas[3]) + 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.1761e-1 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.2242e-1 * sin(_desiredPos.thetas[2]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[3]), 0.2e1) + (0.1761e-1 * sin(_desiredPos.thetas[2]) + 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) - 0.5e-3 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) - 0.1121e-1 * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (0.2e-3 - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) - 0.1121e-1 * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) - 0.1761e-1 * sin(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * velocities.velocities[3]) * velocities.velocities[1] + (0.8e-5 * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + (-0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3]) + 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) - 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1])) * pow(velocities.velocities[2], 0.2e1) + ((-0.8e-5 * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1]) + 0.6e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) - 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) - 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) - 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.4e-5 * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * velocities.velocities[3] * velocities.velocities[2] + 0.2e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * pow(velocities.velocities[3], 0.2e1) * cos(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]);
	_returnTorques.torques[2] = (((-0.2e-4 * cos(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.3e-4) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + (0.2e-4 * cos(_desiredPos.thetas[3]) - 0.4e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) - 0.2e-4) * pow(cos(_desiredPos.thetas[1]), 0.2e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1)) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) - 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) + (-0.2e-4 + 0.2e-4 * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + (0.20e-4 - 0.2e-4 * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.2e1) + 0.2773e-1 + 0.1762e-1 * cos(_desiredPos.thetas[3])) * _angleAccelerations.accelerations[2] + ((-0.4e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * pow(cos(_desiredPos.thetas[1]), 0.2e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1)) * pow(cos(_desiredPos.thetas[2]), 0.2e1) - 0.4e-5 * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[2]) + 0.8808e-2 * cos(_desiredPos.thetas[3]) + 0.6206e-2) * velocities.velocities[3] + (0.4e-5 * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) - 0.2e-5 * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * _angleAccelerations.accelerations[1] + ((0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[3]) + (-0.1121e-1 * sin(_desiredPos.thetas[3]) - 0.5000e-3) * cos(_desiredPos.thetas[3]) - 0.1762e-1 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.1e-4 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[1]), 0.2e1) - 0.1121e-1 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2]) - 0.1762e-1 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + (0.5000e-3 * sin(_desiredPos.thetas[3]) - 0.1581e-1) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (0.2500e-3 + 0.5606e-2 * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) + 0.8808e-2 * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[1], 0.2e1) + (((0.10e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1]) + 0.4e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) - 0.30e-5 * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (0.70e-5 * sin(_desiredPos.thetas[1]) - 0.4e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) - 0.5e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1])) * velocities.velocities[2] + ((-0.3e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.10e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1]) - 0.5e-5 * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) - 0.3e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) + (0.5e-5 * sin(_desiredPos.thetas[1]) - 0.5e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1])) * velocities.velocities[3]) * velocities.velocities[1] + (((-0.1e-4 * sin(_desiredPos.thetas[3]) - 0.12e-4 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + (0.24e-4 * sin(_desiredPos.thetas[3]) + 0.2e-5 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.2e1) + 0.2e-5 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3]) - 0.2e-5 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((-0.18e-4 * sin(_desiredPos.thetas[2]) + 0.2e-4 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) - 0.12e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + (0.2e-4 * sin(_desiredPos.thetas[2]) - 0.2e-4 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[1]), 0.2e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (0.2e-5 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3]) + 0.1e-4 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[2], 0.2e1) - 0.1762e-1 * velocities.velocities[2] * velocities.velocities[3] * sin(_desiredPos.thetas[3]) + ((0.2e-5 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3]) - 0.12e-4 * cos(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3]) + 0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.2e-5 * sin(_desiredPos.thetas[2]) - 0.12e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2]) - 0.4e-5 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) - 0.8808e-2 * sin(_desiredPos.thetas[3]) + 0.2e-5 * cos(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[3], 0.2e1) + 0.9962e0 * sin(_desiredPos.thetas[2]) + 0.3930e0 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.3930e0 * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]);
	_returnTorques.torques[3] = ((0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * pow(cos(_desiredPos.thetas[1]), 0.4e1)) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + 0.8808e-2 * cos(_desiredPos.thetas[3]) + 0.6206e-2) * _angleAccelerations.accelerations[2] + (0.6206e-2 + (0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * pow(cos(_desiredPos.thetas[1]), 0.4e1)) * pow(cos(_desiredPos.thetas[2]), 0.2e1)) * _angleAccelerations.accelerations[3] + ((0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[3]) + (-0.1121e-1 * sin(_desiredPos.thetas[3]) - 0.2500e-3) * cos(_desiredPos.thetas[3]) - 0.8808e-2 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (-0.8808e-2 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.2500e-3 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) - 0.1121e-1 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2]) + 0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.5606e-2 * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (-0.1000e-3 + 0.5606e-2 * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) + 0.8808e-2 * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[1], 0.2e1) + (((-0.2e-5 * sin(_desiredPos.thetas[1]) - 0.2e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.4e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (0.4e-5 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3]) - 0.3e-5 * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) + (0.2e-5 * sin(_desiredPos.thetas[1]) - 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1])) * velocities.velocities[2] + ((0.4e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1]) - 0.2e-5 * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) + (0.2e-5 * sin(_desiredPos.thetas[1]) - 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1])) * velocities.velocities[3]) * velocities.velocities[1] + (0.1e-4 * pow(cos(_desiredPos.thetas[2]), 0.2e1) * cos(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3]) + ((0.1e-4 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) + 0.8808e-2 * sin(_desiredPos.thetas[3]) - 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3]) + 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[2], 0.2e1) + ((-0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) - 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) - 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3]) + 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * velocities.velocities[3] * velocities.velocities[2] + (0.1e-4 * cos(_desiredPos.thetas[2]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2]) + 0.1e-4 * pow(cos(_desiredPos.thetas[2]), 0.2e1) * cos(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[3], 0.2e1) + 0.3930e0 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.3930e0 * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]);

	_previousVelocities = velocities;
	_previousDessiredPos = _desiredPos;

    return _returnTorques;
}
*/

JointTorques Dynamics::InverseDynamics(Velocities& velocities, unsigned long  loopTime)
{
	for (int i = 1; i++; i < 6) {
		_desiredPos.thetas[i] = Integrate(velocities.velocities[i], _previousDesiredPos.thetas[i], loopTime);
		_angleAccelerations.accelerations[i] = Differentiate(velocities.velocities[i], _previousVelocities.velocities[i], loopTime);
	}

	_returnTorques.torques[1] = (((0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) - 0.1121e-1) * pow(cos(_desiredPos.thetas[3]), 0.2e1) - 0.1762e-1 * cos(_desiredPos.thetas[3]) - 0.1581e-1 + 0.5e-3 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.5e-3 * sin(_desiredPos.thetas[2]) + 0.1121e-1 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) + 0.1762e-1 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) + 0.1762e-1 * cos(_desiredPos.thetas[3]) + 0.5606e-2 * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.2e-3 * sin(_desiredPos.thetas[3]) + 0.2162e-1) * _angleAccelerations.accelerations[1] + (0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) - 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[2]) * _angleAccelerations.accelerations[2] + ((0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) + 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (-0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3]) + 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) - 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) - 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1])) * pow(velocities.velocities[1], 0.2e1) + ((((0.2242e-1 * sin(_desiredPos.thetas[3]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.10e-2) * cos(_desiredPos.thetas[3]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.3522e-1 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.2242e-1 * sin(_desiredPos.thetas[2]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.3524e-1 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) - 0.10e-2 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) + 0.3165e-1 * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (-0.5e-3 - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) - 0.1121e-1 * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) - 0.1761e-1 * sin(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * velocities.velocities[2] + (((0.2242e-1 * sin(_desiredPos.thetas[3]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.5e-3) * cos(_desiredPos.thetas[3]) + 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.1761e-1 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.2242e-1 * sin(_desiredPos.thetas[2]) + 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[3]), 0.2e1) + (0.1761e-1 * sin(_desiredPos.thetas[2]) + 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) - 0.5e-3 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) - 0.1121e-1 * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (0.2e-3 - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) - 0.1121e-1 * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) - 0.1761e-1 * sin(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * velocities.velocities[3]) * velocities.velocities[1] + (0.8e-5 * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + (-0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3]) + 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) - 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1])) * pow(velocities.velocities[2], 0.2e1) + ((-0.8e-5 * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1]) + 0.6e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) - 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) - 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) - 0.2e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.4e-5 * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * velocities.velocities[3] * velocities.velocities[2] + 0.2e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * pow(velocities.velocities[3], 0.2e1) * cos(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]);
	_returnTorques.torques[2] = (((-0.2e-4 * cos(_desiredPos.thetas[3]) - 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.3e-4) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + (0.2e-4 * cos(_desiredPos.thetas[3]) - 0.4e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) - 0.2e-4) * pow(cos(_desiredPos.thetas[1]), 0.2e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1)) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) - 0.2e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) + (-0.2e-4 + 0.2e-4 * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + (0.20e-4 - 0.2e-4 * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.2e1) + 0.2773e-1 + 0.1762e-1 * cos(_desiredPos.thetas[3])) * _angleAccelerations.accelerations[2] + ((-0.4e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * pow(cos(_desiredPos.thetas[1]), 0.2e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1)) * pow(cos(_desiredPos.thetas[2]), 0.2e1) - 0.4e-5 * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[2]) + 0.8808e-2 * cos(_desiredPos.thetas[3]) + 0.6206e-2) * velocities.velocities[3] + (0.4e-5 * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) - 0.2e-5 * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * _angleAccelerations.accelerations[1] + ((0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[3]) + (-0.1121e-1 * sin(_desiredPos.thetas[3]) - 0.5000e-3) * cos(_desiredPos.thetas[3]) - 0.1762e-1 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.1e-4 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[1]), 0.2e1) - 0.1121e-1 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2]) - 0.1762e-1 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + (0.5000e-3 * sin(_desiredPos.thetas[3]) - 0.1581e-1) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (0.2500e-3 + 0.5606e-2 * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) + 0.8808e-2 * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[1], 0.2e1) + (((0.10e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1]) + 0.4e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) - 0.30e-5 * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (0.70e-5 * sin(_desiredPos.thetas[1]) - 0.4e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) - 0.5e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1])) * velocities.velocities[2] + ((-0.3e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.10e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1]) - 0.5e-5 * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) - 0.3e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) + (0.5e-5 * sin(_desiredPos.thetas[1]) - 0.5e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1])) * velocities.velocities[3]) * velocities.velocities[1] + (((-0.1e-4 * sin(_desiredPos.thetas[3]) - 0.12e-4 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + (0.24e-4 * sin(_desiredPos.thetas[3]) + 0.2e-5 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.2e1) + 0.2e-5 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3]) - 0.2e-5 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((-0.18e-4 * sin(_desiredPos.thetas[2]) + 0.2e-4 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) - 0.12e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + (0.2e-4 * sin(_desiredPos.thetas[2]) - 0.2e-4 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[1]), 0.2e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (0.2e-5 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3]) + 0.1e-4 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[2], 0.2e1) - 0.1762e-1 * velocities.velocities[2] * velocities.velocities[3] * sin(_desiredPos.thetas[3]) + ((0.2e-5 * sin(_desiredPos.thetas[3]) * cos(_desiredPos.thetas[3]) - 0.12e-4 * cos(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3]) + 0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + ((0.2e-5 * sin(_desiredPos.thetas[2]) - 0.12e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2]) - 0.4e-5 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) - 0.8808e-2 * sin(_desiredPos.thetas[3]) + 0.2e-5 * cos(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[3], 0.2e1) + 0.9962e0 * sin(_desiredPos.thetas[2]) + 0.3930e0 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.3930e0 * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]);
	_returnTorques.torques[3] = ((0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * pow(cos(_desiredPos.thetas[1]), 0.4e1)) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + 0.8808e-2 * cos(_desiredPos.thetas[3]) + 0.6206e-2) * _angleAccelerations.accelerations[2] + (0.6206e-2 + (0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * pow(cos(_desiredPos.thetas[1]), 0.4e1)) * pow(cos(_desiredPos.thetas[2]), 0.2e1)) * _angleAccelerations.accelerations[3] + ((0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[3]) + (-0.1121e-1 * sin(_desiredPos.thetas[3]) - 0.2500e-3) * cos(_desiredPos.thetas[3]) - 0.8808e-2 * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (-0.8808e-2 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.2500e-3 * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) - 0.1121e-1 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2]) + 0.2e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * pow(cos(_desiredPos.thetas[3]), 0.2e1) + 0.5606e-2 * sin(_desiredPos.thetas[2])) * cos(_desiredPos.thetas[2]) + (-0.1000e-3 + 0.5606e-2 * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[3]) + 0.8808e-2 * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[1], 0.2e1) + (((-0.2e-5 * sin(_desiredPos.thetas[1]) - 0.2e-5 * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[3]) + 0.4e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (0.4e-5 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[3]) - 0.3e-5 * sin(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) + (0.2e-5 * sin(_desiredPos.thetas[1]) - 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1])) * velocities.velocities[2] + ((0.4e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1]) - 0.2e-5 * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1]) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + 0.4e-5 * cos(_desiredPos.thetas[1]) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) * sin(_desiredPos.thetas[1]) * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]) + (0.2e-5 * sin(_desiredPos.thetas[1]) - 0.2e-5 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[1])) * cos(_desiredPos.thetas[1])) * velocities.velocities[3]) * velocities.velocities[1] + (0.1e-4 * pow(cos(_desiredPos.thetas[2]), 0.2e1) * cos(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3]) + ((0.1e-4 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.1e-4 * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2])) * pow(cos(_desiredPos.thetas[1]), 0.4e1) - 0.1e-4 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) + 0.8808e-2 * sin(_desiredPos.thetas[3]) - 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3]) + 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[2], 0.2e1) + ((-0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3]) + 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3])) * pow(cos(_desiredPos.thetas[2]), 0.2e1) + (0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) - 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3])) * cos(_desiredPos.thetas[2]) - 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3]) + 0.4e-5 * pow(cos(_desiredPos.thetas[1]), 0.2e1) * sin(_desiredPos.thetas[3])) * velocities.velocities[3] * velocities.velocities[2] + (0.1e-4 * cos(_desiredPos.thetas[2]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * pow(cos(_desiredPos.thetas[3]), 0.2e1) * sin(_desiredPos.thetas[2]) + 0.1e-4 * pow(cos(_desiredPos.thetas[2]), 0.2e1) * cos(_desiredPos.thetas[3]) * pow(cos(_desiredPos.thetas[1]), 0.4e1) * sin(_desiredPos.thetas[3])) * pow(velocities.velocities[3], 0.2e1) + 0.3930e0 * sin(_desiredPos.thetas[2]) * cos(_desiredPos.thetas[3]) + 0.3930e0 * cos(_desiredPos.thetas[2]) * sin(_desiredPos.thetas[3]);

	_previousVelocities = velocities;
	_previousDesiredPos = _desiredPos;

	return _returnTorques;
}